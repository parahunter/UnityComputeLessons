// NOT NONE OF THESE SHADERS ARE OPTIMAL THEY ARE SIMPLE!!!
// See http://www.studiostyle.sk/dmagic/gallery/gfxmodes.htm
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSHiRes
#pragma kernel CSHiRes_OnlyRes
#pragma kernel CSHiRes_ResCol

// Textures
RWTexture2D<float4> Result;

Texture2D SourceTex;
SamplerState samplerSourceTex // GOTCHA :: Unity requires samplerTEX_NAME not part of HLSL spec but unity   ¯\_(ツ)_/¯
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

#define COL_COUNT 16
static float3 colours[COL_COUNT] = {
	float3(0.53, 0.00, 0.00),   // Red
  float3(1.00, 0.47, 0.47),   // Light Red

	float3(0.80, 0.27, 0.80),   // Violet
	float3(0.00, 0.80, 0.33),   // Green
  float3(0.67, 1.00, 0.40),   // Light Greeb

	float3(0.00, 0.00, 0.67),   // Blue
  float3(0.00, 0.53, 1.00),   // Light Blue
	float3(0.67, 1.00, 0.93),   // Cyan

	float3(0.93, 0.93, 0.47),   // Yellow
	float3(0.87, 0.53, 0.33),   // Orange
	float3(0.40, 0.27, 0.00),   // Brown

	float3(0.00, 0.00, 0.00),   // Black
	float3(0.20, 0.20, 0.20),
	float3(0.47, 0.47, 0.47),
  float3(0.73, 0.73, 0.73),
	float3(1.00, 1.00, 1.00)   // White
};


// C64 - HiRes 40x25 blocks of 8x8 cells with 2 colours 
#define BLOCK_W 40
#define BLOCK_H 25
#define CELL_W 8
#define CELL_H 8

groupshared uint HiResColCount[CELL_W][CELL_H];
groupshared uint ColTotals[COL_COUNT];

float Epsilon = 1e-10;

int ConvColour(float3 sourceCol) {
  // Convert to C64 Colour
  float minDist = 10000000.0;
  int cMin = 0;
  for (uint i = 0; i < COL_COUNT; i++) {
    float d = length(sourceCol.rgb - colours[i]);
    if (d < minDist) {
      cMin = i;
      minDist = d;
    }
  }

  return cMin;
}

// SV_DispatchThreadID your global uint3 0,0,0 - dimx*NumGroupX,dimy*NumGroupY,1
// SV_GroupThreadID your local uint3 will never be above dimx,dimy,1
// SV_GroupID your group will not be above NumGroupX,NumGroupY,1 
// SV_GroupIndex = SV_GroupThreadID.z*dimx*dimy + SV_GroupThreadID.y*dimx + SV_GroupThreadID.x
[numthreads(CELL_W,CELL_H,1)]
void CSHiRes(uint3 id : SV_DispatchThreadID, uint gindex : SV_GroupIndex, uint3 gid : SV_GroupThreadID) {
  float2 texCoord =
      float2(id.x / float(CELL_W * BLOCK_W), id.y / float(CELL_H * BLOCK_H));
  float4 res = SourceTex.SampleLevel(samplerSourceTex, texCoord, 0);

  // Convert to C64 Colour
  uint c = ConvColour(res.rgb);

  // Save then block & Sync
  HiResColCount[gid.x][gid.y] = c;
  GroupMemoryBarrierWithGroupSync();

  // Each thread can count a single colour
  // Note :: note the best method but simple
  if (gindex < COL_COUNT) {
    uint x, y;
    ColTotals[gindex] = 0;
    for (x = 0; x < CELL_W; x++)
      for (y = 0; y < CELL_H; y++)
        if (HiResColCount[x][y] == gindex) {
          ColTotals[gindex] += 1;
        }
  }

  //
  GroupMemoryBarrierWithGroupSync();
  Result[id.xy] = float4(0, 0, 0, 0);

  // Single thread operation to find two biggest
  if (gindex == 0) {
    uint g;
    uint2 aCol = uint2(0, ColTotals[0]);
    uint2 bCol = uint2(20,0);

    for (g = 1; g < COL_COUNT; g++) {
      uint t = ColTotals[g];
      if (aCol.y < t) {
        bCol = aCol;
        aCol = uint2(g, t);
      } else if (bCol.y < t) {
        bCol = uint2(g, t);
      }
    }

    ColTotals[0] = aCol.x;
    ColTotals[1] = bCol.x;
/* DEBUG
    Result[id.xy + uint2(0, 0)] = float4(colours[aCol.x], 1);
    Result[id.xy + uint2(1, 0)] = float4(aCol.y/64.0, aCol.y/64.0, aCol.y/64.0, 1);
    Result[id.xy + uint2(2, 0)] = float4(colours[bCol.x], 1);
    Result[id.xy + uint2(3, 0)] = float4(bCol.y/64.0, bCol.y/64.0, bCol.y/64.0, 1);
*/
  }
  GroupMemoryBarrierWithGroupSync();

/* DEBUG
  if (gid.y == 0) {
    if (gid.x < 4) {
      res.rgb = colours[ColTotals[0]];
    } else {
      res.rgb = colours[ColTotals[1]];
    }
    Result[id.xy] = res;
    return;
  }
*/

  // Def made the cut
  if ((c == ColTotals[0]) || (c == ColTotals[1])) {
    Result[id.xy] = float4(colours[c], 1);
    return;
  }

  // Which are we closer to
  if (length(res.rgb - colours[ColTotals[0]]) <
      length(res.rgb - colours[ColTotals[1]])) {
    res.rgb = colours[ColTotals[0]];
  } else {
    res.rgb = colours[ColTotals[1]];
  }

  Result[id.xy] = res;
}

// DEBUG :: Only Res
[numthreads(CELL_W,CELL_H,1)]
void CSHiRes_OnlyRes(uint3 id : SV_DispatchThreadID, uint gindex : SV_GroupIndex) {
  float2 texCoord = float2(id.x / float(CELL_W*BLOCK_W), id.y / float(CELL_H*BLOCK_H));
  Result[id.xy] = SourceTex.SampleLevel(samplerSourceTex, texCoord, 0);
}

// DEBUG :: Res & Colour
[numthreads(CELL_W,CELL_H,1)]
void CSHiRes_ResCol(uint3 id : SV_DispatchThreadID, uint gindex : SV_GroupIndex, uint3 gid : SV_GroupThreadID, uint3 groupId : SV_GroupID) {
  float2 texCoord = float2(id.x / float(CELL_W*BLOCK_W), id.y / float(CELL_H*BLOCK_H));
  float4 res = SourceTex.SampleLevel(samplerSourceTex, texCoord, 0);

  // Convert to C64 Colour
  int c = ConvColour(res.rgb);
  res.rgb = colours[c];
  
  // DEBUG Show CELL Borders
  if((gid.x == 0) || (gid.y == 0)) {
    res.xyz = res.xyz * 0.9 + float3(0.1, 0, 0.1);
  }
  
  Result[id.xy] = res;
}
