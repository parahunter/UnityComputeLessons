// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define KERNEL_SIZE 4

float intensity;

#define BLOCK_SIZE 2

float cirleRadius;
float circleCenterX;
float circleCenterY;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

[numthreads(KERNEL_SIZE, KERNEL_SIZE, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	for (int x = 0; x < BLOCK_SIZE; x++)
	{
		for (int y = 0; y < BLOCK_SIZE; y++)
		{
			float2 v = float2(id.x * BLOCK_SIZE + x, id.y * BLOCK_SIZE + y);			
			float l = length(v - float2(circleCenterX, circleCenterY));
			
			Result[v] = l < cirleRadius ? float4(1, 1, 1, 1) : float4(0, 0, 0, 0);
		}
	}
}